name: Build and Test Beastion

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Install CMake on Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          sudo apt-add-repository -y ppa:deadsnakes/ppa
          sudo apt-get install -y cmake

      - name: Install CMake on macOS
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install cmake

      - name: Install CMake on Windows
        if: matrix.os == 'windows-latest'
        run: |
          choco install cmake

      - name: Install dependencies on Ubuntu (SFML)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -y libsfml-dev

      - name: Install dependencies on macOS (SFML)
        if: matrix.os == 'macos-latest'
        run: brew install sfml

      - name: Download and Install SFML on Windows
        if: matrix.os == 'windows-latest'
        run: |
          Invoke-WebRequest -Uri https://www.sfml-dev.org/files/SFML-2.5.1-windows-vc15-64-bit.zip -OutFile sfml.zip
          Expand-Archive -Path sfml.zip -DestinationPath C:\SFML
          Remove-Item sfml.zip

      - name: Configure CMake with SFML Path
        if: matrix.os == 'windows-latest'
        run: cmake -S . -B build -DSFML_DIR="C:/SFML/SFML-2.5.1"
        
      - name: Create build directory
        run: cmake -S . -B build

      - name: Build with CMake
        run: cmake --build build

      - name: Run tests
        run: |
          cd build
          ctest --output-on-failure
